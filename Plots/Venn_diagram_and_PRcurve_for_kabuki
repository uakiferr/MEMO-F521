####### Process to plot the overlapping cpg  ########

BestResultsDir <- "/path/to/kabuki/Best_overall/"

BuildOverlaps <- function(BestResultsDir,
                          size = 11,
                          seed = 50,
                          CPGs_df = cpgLocation_df,
                          min.cpgs = 3) {
  ### List Results Files  ###
  fileNames_char <- list.files(BestResultsDir)
  targetNames_char <- paste0("samplesize", size, "_seed", seed)
  correctFiles_idx <- grep(targetNames_char, fileNames_char)
  correctNames_char <- fileNames_char[correctFiles_idx]
  names(correctNames_char) <- sapply(
    strsplit(correctNames_char, "_"),
    function(x){
      gsub(pattern = "Results", replacement = "", x[1])
    }
  )
  
  ### Load and Clean Appropriate Files  ###
  allRes_ls <- lapply(correctNames_char, function(x){
    
    res_ls <- readRDS(paste0(BestResultsDir, x))
      
      if(grepl("ProbeLasso", x)){
        
        ranges_df <- res_ls[[1]]
        results_df <-ranges_df[ranges_df$dmr.n.cpgs > 2 & ranges_df$dmr.pval < 0.05 & abs((ranges_df$betaAv_Control)-(ranges_df$betaAv_Kabuki)) > 0.1,  ]
        
        
        # The raw Comb-p results were filtered to > 1, not > 4.
        results_df <- results_df[results_df$dmr.n.cpgs >= min.cpgs, ]
        res_ls[[1]] <- results_df
        
      }
    if(grepl("idDMR", x))
    {
      
      ranges_df <- res_ls[[1]]
      results_df <-ranges_df[ranges_df$dmr.n.cpgs > 2 & ranges_df$dmr.pval < 0.05 & abs(ranges_df$meandiff)> 0.1,  ]
      
      
      # The raw Comb-p results were filtered to > 1, not > 4.
      results_df <- results_df[results_df$dmr.n.cpgs >= min.cpgs, ]
      res_ls[[1]] <- results_df
      
    }
    if(grepl("DMRcate",x)){
      
      ranges_df <- res_ls[[1]]
      results_df <-ranges_df[ranges_df$dmr.n.cpgs > 2 & ranges_df$dmr.pval < 0.05 & abs(ranges_df$meandiff)> 0.1,  ]
      
      
      # The raw Comb-p results were filtered to > 1, not > 4.
      results_df <- results_df[results_df$dmr.n.cpgs >= min.cpgs, ]
      res_ls[[1]] <- results_df
      
    }
    
    results_df <- res_ls[[1]]
      keepRows <- rowSums(is.na(results_df)) != ncol(results_df)
      results_df <- results_df[keepRows, ]
      
      if(nrow(results_df) > 0){
        
        results_IRanges <- IRanges(
          start = results_df$dmr.start,
          end = results_df$dmr.end
        )
        GRanges(
          seqnames = results_df$dmr.chr,
          ranges = results_IRanges
        )
        
      }
      
    })
  
  ###  Return  ###
  attr(allRes_ls, "size") <- size
  attr(allRes_ls, "repl")  <- which(c(50, 100, 210, 330, 450) %in% seed)
  allRes_ls
  
}


PlotOverlaps <- function(BestResultsDir,
                         figFileName,
                         device = pdf,
                         plotTitle = "default",
                         sizes_num = c(3, 5, 7, 10),
                         seeds_int = c(50, 100, 210, 330, 450),
                         CPGs_df = cpgLocation_df,
                         min.cpgs = 3,
                         totalDMR = 4569, ### corresponds to the total number of CPG in the 11 groups
                         ...) {
  
  # Group by seeds
  design_mat <- expand.grid(seeds_int, sizes_num)
  cpg_df <- CPGs_df
  minCPGs <- min.cpgs
  
  overlapsByMethods_ls <- lapply(1:nrow(design_mat), function(i) {
    
    overlaps_ls <- BuildOverlaps(
      BestResultsDir = BestResultsDir,
      size = design_mat[i, 2], seed = design_mat[i, 1],
      CPGs_df = cpg_df,
      min.cpgs = minCPGs
    )
    
    overlapAttr <- attributes(overlaps_ls)
    
    null_idx <- sapply(overlaps_ls, is.null)
    overlaps_ls <- overlaps_ls[!null_idx]
    
    attr(overlaps_ls, "samplesize") <- overlapAttr$size
    attr(overlaps_ls, "repl")  <- overlapAttr$repl
    overlaps_ls
    
  })
  
  CreateHue <- function(n) {
    hues = seq(15, 375, length = n + 1)
    grDevices::hcl(h = hues, l = 65, c = 100)[1:n]
  }
  
  # Loop through each combination of size and seed
  for (i in 1:nrow(design_mat)) {
    size <- design_mat[i, 2]
    seed <- design_mat[i, 1]
    
    # Construct file name for each plot
    currentFigFileName <- file.path(figFileName, paste0("plot_samplesize", size, "_seed", seed, ".pdf"))
    
    device(file = currentFigFileName, ...)
    
    overlaps_ls <- overlapsByMethods_ls[[i]]
    
    size_num <- attr(overlaps_ls, "size")
    repl_int  <- attr(overlaps_ls, "repl")
    
    currentPlotTitle <- if (plotTitle == "default") {
      paste0("Venn Diagram for size = ", size_num, ", rep = ", repl_int)
    } else {
      plotTitle
    }
    
    makeVennDiagram(
      overlaps_ls, NameOfPeaks = names(overlaps_ls), totalTest = totalDMR,
      by = "region", fill = CreateHue(length(overlaps_ls)),
      main = currentPlotTitle
    )
    
    dev.off()
  }
}



######### Build a PR curve list for each function best results #############
BuildPRcurve <- function(BestResultsDir,
                         size =11,
                         seed = 50,
                         beta_mat = beta_kabuki,
                         Kabuki_dmr_df,
                         CPGs_df = cpgLocation_df,
                         min.cpgs = 3){
  
  ### List Results Files  ###
  fileNames_char <- list.files(BestResultsDir)
  targetNames_char <- paste0("samplesize", size, "_seed", seed)
  correctFiles_idx <- grep(targetNames_char, fileNames_char)
  correctNames_char <- fileNames_char[correctFiles_idx]
  names(correctNames_char) <- sapply(
    strsplit(correctNames_char, "_"),
    function(x){
      gsub(pattern = "Results", replacement = "", x[1])
    }
  )
  
  ### Load and Clean Appropriate Files  ###
  allRes_ls <- lapply(correctNames_char, function(x){
    
    res_ls <- readRDS(paste0(BestResultsDir, x))
    
    if(grepl("ProbeLasso", x)){
      
      CleanResults_PB(dmrResults_ls = res_ls,
                      Kabuki_dmr_df)
      
    } 
    if(grepl("DMRcate",x)){
      
      CleanResults(dmrResults_ls = res_ls,
                      Kabuki_dmr_df)
      } 
    if(grepl("idDMR",x)){
      
      CleanResults(dmrResults_ls = res_ls,
                   Kabuki_dmr_df)}
    })
  
  ###  Build PR Curves  ###
  allPRs_ls <- lapply(allRes_ls, function(cleanDMR_df){
    
    if(!is.null(cleanDMR_df$dmr.n.cpgs)){
      
      x_df <- cleanDMR_df[, c("aclust.order", "dmr.pval", "actual")]
      x_df$status <- ifelse(x_df$actual == "positive", 1, 0)
      x_df$dmr.pval[is.na(x_df$dmr.pval)] <- 1
      
      # PR curve
      pr.curve(scores.class0 = 1 - x_df$dmr.pval,
               weights.class0 = x_df$status,
               curve = TRUE)
      
    } else {
      NULL
    }
    
  })
  
  ###  Return  ###
  attr(allPRs_ls, "size") <- size
  attr(allPRs_ls, "repl")  <- which(c(50, 100, 210, 330, 450) %in% seed)
  allPRs_ls
  
}


PlotPRCurve <- function(prCurves_ls,
                        plotTitle = "default",
                        new = TRUE,
                        lineWidth = 1,
                        colours = NULL){
  
  # Extract Meta
  size <- attr(prCurves_ls, "samplesize")
  repl  <- attr(prCurves_ls, "repl")
  
  # Colours
  if(is.null(colours)){
    
    CreateHue <- function(n){
      
      hues = seq(15, 375, length = n + 1)
      hcl(h = hues, l = 65, c = 100)[1:n]
      
    }
    
    colours <- CreateHue(length(prCurves_ls))
    
  }
  
  # Foundation Plot
  if(new){
    
    if(plotTitle == "default"){
      plotTitle <- paste0(
        "Precision-recall curve: size = ", size, ", rep = ", repl
      )
    }
    
    # Main
    plot(
      prCurves_ls[[1]],
      color = colours[1],
      auc.main = FALSE, legend = TRUE,
      main = plotTitle,
      cex.main = 1, lwd = lineWidth
    )
    
    # Legend
    legend(x = 0.75, y = 1,
           legend = names(prCurves_ls),
           col = colours, lty = 1, cex = 0.75, box.lty = 0)
    
  } else {
    
    plot(
      prCurves_ls[[1]],
      color = colours[1],
      add = TRUE, legend = TRUE,
      lwd = lineWidth
    )
    
  }
  
  
  # Subsequent
  for(i in 2:length(prCurves_ls)){
    
    if(!is.null(prCurves_ls[[i]])){
      plot(
        prCurves_ls[[i]],
        color = colours[i],
        add = TRUE, legend = TRUE,
        lwd = lineWidth
      )
    }
    
  }
  
}

######### Plots ######

BuildPRC <- BuildPRcurve(BestResultsDir,
                           size = 11, ##3, 5, 7, 10
                           seed = c(50), ##50, 100, 210, 330, 450
                           beta_mat = beta_kabuki,
                           Kabuki_dmr_df,
                           CPGs_df = cpgLocation_df,
                           min.cpgs = 3) 

PlotPRCurve(BuildPRC,
            plotTitle = "default" ,
            new = TRUE,
            lineWidth = 1,
            colours = NULL)

resultsDir <- "/Users/Asus/Documents/GSEs/Kabuki/Best_results_kabuki/Best_overall/"
figFileName <- paste0(resultsDir, "Fig/")

PlotOverlaps(resultsDir,
             figFileName,
             device = pdf,
             plotTitle = "default",
             size =11,
             seed = 50,
             CPGs_df = CPGs_df,
             min.cpgs = 3)
